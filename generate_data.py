# -*- coding: utf-8 -*-
"""Welcome To Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

!pip install faker

import pandas as pd
import numpy as np
from faker import Faker
import random
from datetime import datetime, timedelta
import os

# --- Configuration ---
NUM_NORMAL_TRANSACTIONS = 80000
NUM_ANOMALOUS_TRANSACTIONS = 20000
DATA_DIR = 'data'
FILE_PATH = os.path.join(DATA_DIR, 'complex_transactions.csv')

# --- Ensure data directory exists ---
os.makedirs(DATA_DIR, exist_ok=True)

# Initialize Faker
fake = Faker()

# --- Realistic Data Lists ---
CURRENCIES = ['USD', 'EUR', 'GBP', 'JPY', 'AUD', 'CAD']

# UPDATED: List of 100 countries for greater diversity
COUNTRIES = [
    # Americas (20)
    'Argentina', 'Bolivia', 'Brazil', 'Canada', 'Chile', 'Colombia', 'Costa Rica', 'Cuba', 'Ecuador', 'El Salvador',
    'Guatemala', 'Honduras', 'Mexico', 'Nicaragua', 'Panama', 'Paraguay', 'Peru', 'United States', 'Uruguay', 'Venezuela',
    # Europe (30)
    'Austria', 'Belgium', 'Bulgaria', 'Croatia', 'Cyprus', 'Czech Republic', 'Denmark', 'Estonia', 'Finland', 'France',
    'Germany', 'Greece', 'Hungary', 'Ireland', 'Italy', 'Latvia', 'Lithuania', 'Luxembourg', 'Malta', 'Netherlands',
    'Poland', 'Portugal', 'Romania', 'Slovakia', 'Slovenia', 'Spain', 'Sweden', 'Switzerland', 'Ukraine', 'United Kingdom',
    # Asia (30)
    'Afghanistan', 'Bangladesh', 'China', 'Hong Kong', 'India', 'Indonesia', 'Iran', 'Iraq', 'Israel', 'Japan',
    'Jordan', 'Kazakhstan', 'Kuwait', 'Malaysia', 'Nepal', 'Oman', 'Pakistan', 'Philippines', 'Qatar', 'Saudi Arabia',
    'Singapore', 'South Korea', 'Sri Lanka', 'Syria', 'Taiwan', 'Thailand', 'Turkey', 'United Arab Emirates', 'Vietnam', 'Yemen',
    # Africa (15)
    'Algeria', 'Angola', 'Cameroon', 'Egypt', 'Ethiopia', 'Ghana', 'Kenya', 'Morocco', 'Mozambique', 'Nigeria',
    'Senegal', 'South Africa', 'Sudan', 'Tanzania', 'Uganda',
    # Oceania (5)
    'Australia', 'Fiji', 'New Zealand', 'Papua New Guinea', 'Samoa'
]


# --- Generate Base User Profiles ---
user_profiles = {fake.name(): {'country': random.choice(COUNTRIES), 'avg_val': np.random.uniform(50, 2000)} for _ in range(5000)}
recipient_profiles = [fake.name() for _ in range(10000)]
data = []

print("Generating 100,000 transaction records with 100 countries... this may take a moment.")

# --- Generate Normal Transactions ---
for _ in range(NUM_NORMAL_TRANSACTIONS):
    sender_name = random.choice(list(user_profiles.keys()))
    profile = user_profiles[sender_name]
    data.append({
        'Timestamp': fake.date_time_between(start_date='-60d', end_date='now'),
        'Amount': abs(round(np.random.normal(loc=profile['avg_val'], scale=profile['avg_val']*0.4), 2)),
        'Currency': random.choice(CURRENCIES),
        'Sender_Name': sender_name,
        'Recipient_Name': random.choice(recipient_profiles),
        'Sender_Country': profile['country'],
        'Recipient_Country': random.choice(COUNTRIES),
        'Transaction_Type': random.choice(['Payment', 'Transfer']),
        'Device_Type': random.choice(['Mobile', 'Desktop', 'Tablet']),
        'Transactions_Last_24H': random.randint(1, 8),
        'Avg_Transaction_Value_Last_30D': round(profile['avg_val'] * np.random.uniform(0.9, 1.1), 2),
        'Is_New_Recipient': random.choice([0, 1]),
        'Is_Anomaly': 0
    })

# --- Inject Anomalous Transactions ---
for i in range(NUM_ANOMALOUS_TRANSACTIONS):
    sender_name = random.choice(list(user_profiles.keys()))
    profile = user_profiles[sender_name]
    fraud_type = i % 3 # Using 3 fraud types
    entry = {}
    if fraud_type == 0: # Structuring
        entry = {
            'Timestamp': datetime.now() - timedelta(minutes=random.randint(1, 15)), 'Amount': round(random.uniform(9800, 9998), 2),
            'Currency': 'USD', 'Sender_Name': sender_name, 'Recipient_Name': random.choice(recipient_profiles),
            'Sender_Country': profile['country'], 'Recipient_Country': 'Cayman Islands', 'Transaction_Type': 'Transfer', 'Device_Type': 'Desktop',
            'Transactions_Last_24H': 30, 'Avg_Transaction_Value_Last_30D': profile['avg_val'], 'Is_New_Recipient': 1, 'Is_Anomaly': 1
        }
    elif fraud_type == 1: # Unusually High Value
        entry = {
            'Timestamp': fake.date_time_this_month(), 'Amount': round(profile['avg_val'] * random.uniform(25, 60), 2),
            'Currency': 'EUR', 'Sender_Name': sender_name, 'Recipient_Name': random.choice(recipient_profiles),
            'Sender_Country': profile['country'], 'Recipient_Country': random.choice(COUNTRIES), 'Transaction_Type': 'Payment', 'Device_Type': 'Mobile',
            'Transactions_Last_24H': random.randint(1, 3), 'Avg_Transaction_Value_Last_30D': profile['avg_val'], 'Is_New_Recipient': 1, 'Is_Anomaly': 1
        }
    else: # Geographical Anomaly
        entry = {
            'Timestamp': fake.date_time_this_month(), 'Amount': round(np.random.uniform(500, 3000), 2),
            'Currency': 'GBP', 'Sender_Name': sender_name, 'Recipient_Name': random.choice(recipient_profiles),
            'Sender_Country': 'Brazil', 'Recipient_Country': 'Nigeria', 'Transaction_Type': 'Payment', 'Device_Type': 'Desktop',
            'Transactions_Last_24H': 2, 'Avg_Transaction_Value_Last_30D': profile['avg_val'], 'Is_New_Recipient': 1, 'Is_Anomaly': 1
        }
    data.append(entry)

df = pd.DataFrame(data).sample(frac=1).reset_index(drop=True)
df.to_csv(FILE_PATH, index=False)
print(f"âœ… Generated '{FILE_PATH}' with {len(df)} records.")
